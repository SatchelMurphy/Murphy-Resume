---
title: "Client Report - The Opinions of Star Wars"
subtitle: "Course DS 250"
author: "Satchel Murphy"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
```


## Elevator pitch

_It is important to see that data can be altered and manipulated in a way to be easier understood. Grouping together data into categories can help when it comes to displaying the data. Star Wars being such a popular franchise most likely has a lot of data from surveys about it. In this report, we can explore what we can do with results of a survey and how to make graphs from it._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
data = pd.read_csv('https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv',encoding_errors='ignore',header=None,skiprows=2)

```

__Highlight the Questions and Tasks__

## TASK 1

__Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.__

_I was able to shorten the column names and clean them up so they would be easier to read. Now some of the headers to the data will all be less than about 30 characters._

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
# Shorten and clean up column names
data.columns=[
    'respondent_id',
    'seen_any',
    'fan',
    'Seen_1',
    'Seen_2',
    'Seen_3',
    'Seen_4',
    'Seen_5',
    'Seen_6',
    'ranking_1',
    'ranking_2',
    'ranking_3',
    'ranking_4',
    'ranking_5',
    'ranking_6',
    'han_solo',
    'luke_skywalker',
    'princess_leia',
    'anakin_skywalker',
    'obi_wan',
    'emperor_palpatine',
    'darth_vader',
    'lando_calrissian',
    'boba_fett',
    'c3po',
    'r2d2',
    'jar_jar_binks',
    'padme_amidala',
    'yoda',
    'shot_first',
    'expanded_universe',
    'fan_expanded_universe',
    'fan_star_trek',
    'gender',
    'age',
    'income',
    'education',
    'location'
    ]
data = data.rename(columns={
    1:'respondent_id',
    2:'seen_any',
    3:'fan',
    4:'Seen_1',
    5:'Seen_2',
    6:'Seen_3',
    7:'Seen_4',
    8:'Seen_5',
    9:'Seen_6',
    10:'ranking_1',
    11:'ranking_2',
    12:'ranking_3',
    13:'ranking_4',
    14:'ranking_5',
    15:'ranking_6',
    16:'favorite_character',
    17:'han_solo',
    18:'luke_skywalker',
    19:'princess_leia',
    20:'anakin_skywalker',
    21:'obi_wan',
    22:'emperor_palpatine',
    23:'darth_vader',
    24:'lando_calrissian',
    25:'boba_fett',
    26:'c3po',
    27:'r2d2',
    28:'jar_jar_binks',
    29:'padme_amidala',
    30:'yoda',
    31:'shot_first',
    32:'expanded_universe',
    33:'fan_expanded_universe',
    34:'fan_star_trek',
    35:'gender',
    36:'age',
    37:'income',
    38:'education',
    39:'location'
})

```


```{python}
#| label: Q1 table
#| code-summary: table example
#| tbl-cap: "Shorter Names"
#| tbl-cap-location: top
# Include and execute your code here
mydat = data.head(10)\
    .reset_index()\
    .tail(10)\
    

display(mydat)

```


## TASK 2

__Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.__

_Here I was able to convert the age ranges to a single number and then convert it to a different type of column displaying those numbers. I was able to do the same for the eduacation level and income ranges. The target was then established on the income range number 3, being the number with $50,000 as the minimum of that range. We want to see information based on that number._

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

data = data[data['seen_any'] == 'Yes']

age_mapping = {
    '18-29': 1,
    '30-44': 2,
    '45-60': 3,
    '> 60': 4
}
data['age'] = data['age'].map(age_mapping)

education_mapping = {
    'Less than high school degree': 1,
    'High school degree': 2,
    'Some college or Associate degree': 3,
    'Bachelor degree': 4,
    'Graduate degree': 5
}
data['education'] = data['education'].map(education_mapping)

income_mapping = {
    '$0 - $24,999': 1,
    '$25,000 - $49,999': 2,
    '$50,000 - $99,999': 3,
    '$100,000 - $149,999': 4,
    '$150,000+': 5
}
data['income'] = data['income'].map(income_mapping)

data['target'] = (data['income'] > 3).astype(int)


```





```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = data.head(10)\
    .reset_index()\
    .tail(10)\

display(mydat)

```


## TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__

_I feel like I did a fairly good job at recreating the tables that were found on the original document. The rankings table is straightforward, but I decided to add some color to the other chart about who shot first._

```{python}
#| label: Q3 Chart 1
#| code-summary: plot example
#| fig-cap: "Which Star Wars Movie was Best?"
#| fig-align: center
# Include and execute your code here

seen_all = data[
    (data['Seen_1'] == 'Star Wars: Episode I  The Phantom Menace') &
    (data['Seen_2'] == 'Star Wars: Episode II  Attack of the Clones') &
    (data['Seen_3'] == 'Star Wars: Episode III  Revenge of the Sith') &
    (data['Seen_4'] == 'Star Wars: Episode IV  A New Hope') &
    (data['Seen_5'] == 'Star Wars: Episode V The Empire Strikes Back') &
    (data['Seen_6'] == 'Star Wars: Episode VI Return of the Jedi')
]

# Calculate the percentage of respondents who ranked each movie as their best
ranking_columns = ['ranking_1', 'ranking_2', 'ranking_3', 'ranking_4', 'ranking_5', 'ranking_6']
percentage_best = seen_all[ranking_columns].apply(lambda x: (x == 1).mean() * 100)

# Reset the index and rename columns
percentage_best = percentage_best.reset_index().rename(columns={'index': 'Movie', 0: 'Percentage'})

# Create a bar chart
chart = alt.Chart(percentage_best).mark_bar().encode(
    y='Movie:N',
    x='Percentage:Q', 
    tooltip=['Movie', 'Percentage']
).properties(
    title="Which Star Wars Movie is the Best"
)

text = chart.mark_text(
    align='left',
    baseline='middle',
    dx=3,  # Adjust the horizontal offset of the labels
    fontSize=10
).encode(
    text=alt.Text('Percentage:Q', format='.1f')  # Format the labels to one decimal place
)

# Combine the chart and text layers
chart_with_labels = (chart + text)

chart_with_labels

```



```{python}
#| label: Q3 Chart 2
#| code-summary: plot example
#| fig-cap: "Who Shot First?"
#| fig-align: center
# Include and execute your code here

shoot_first_data = data[data['shot_first'].isin(['Han', 'Greedo', "I don't understand this question"])]

# Calculate the counts for each option
percentage_data2 = shoot_first_data['shot_first'].value_counts(normalize=True) * 100
percentage_data2 = percentage_data2.reset_index().rename(columns={'index': 'Option', 'shot_first': 'Percentage'})


# Create a bar chart
chart2 = alt.Chart(percentage_data2).mark_bar().encode(
    y=alt.Y('Option:N', title='Option'),
    x=alt.X('Percentage:Q', title='Percentage'),
    color=alt.Color('Option:N', scale=alt.Scale(scheme='category10')),
    tooltip=['Option', 'Percentage']
).properties(
    title="Han vs Greedo: Who Shot First? (Percentage)"
)

text2 = chart2.mark_text(
    align='center',
    baseline='bottom',
    dx=15,  # Adjust the vertical offset of the labels
    color='black',  # Set the color of the labels to black
    fontSize=10  # Set the font size of the labels
).encode(
    text=alt.Text('Percentage:Q', format='.1f')  # Format the labels to one decimal place
)

chart2_labels = (chart2 + text2)

chart2_labels

```




## TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__

_Using the target that I had previously established as well as the income ranges. The model that I ended up making shows that there is a high chance that the respondent makes more than $50,000. The accuracy score that I received was around 82%._

```{python}


X = data.drop(['respondent_id', 'income', 'target'], axis=1)
y = data['target']

# Perform label encoding on the categorical variables in X
encoder = LabelEncoder()
X_encoded = X.apply(encoder.fit_transform)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Report the accuracy
print("Accuracy:", accuracy)



```

## APPENDIX A (All Python Code)

```python
#paste other your code from your python file (.py) here
#the code snippets above should be just enough code to display the chart or table needed for the question or task
#the appendix should have all the code, and it should be well `commented`
```
